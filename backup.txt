using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;
using RimWorld;
using Verse;
using Harmony;

namespace WitcherTrials
{
    [DefOf]
    public static class HediffDefOf
    {
        public static HediffDef WitcherTrials_Hediff_Grasses;
        public static HediffDef WitcherTrials_Hediff_Dreams;
        public static HediffDef WitcherTrials_Hediff_Elders;
    }

    [DefOf]
    public static class RecipeDefOf
    {
        public static RecipeDef WitcherTrials_Recipe_Grasses;
        public static RecipeDef WitcherTrials_Recipe_Dreams;
        public static RecipeDef WitcherTrials_Recipe_Elders;
        
        public static bool WitcherTrials_Recipe_Hide_Grasses;
        public static bool WitcherTrials_Recipe_Hide_Dreams;
        public static bool WitcherTrials_Recipe_Hide_Elders;
    }

    [StaticConstructorOnStartup]
    public static class HarmonyPatches
    {
        static HarmonyPatches()
        {
            HarmonyInstance harmony = HarmonyInstance.Create("Rimworld.imoja.withertrials");

            // find the "GenerateSurgeryOption" method of the class 'RimWorld.HealthCardUtility'
            MethodInfo targetmethod = AccessTools.Method(typeof(RimWorld.HealthCardUtility), "GenerateSurgeryOption");

            // find the static method to call before and after the targetmethod
            HarmonyMethod prefixmethod = new HarmonyMethod(typeof(WitcherTrials.HarmonyPatches).GetMethod("GenerateSurgeryOption_Prefix"));
            HarmonyMethod postfixmethod = new HarmonyMethod(typeof(WitcherTrials.HarmonyPatches).GetMethod("GenerateSurgeryOption_Postfix"));

            // patch the targetmethod, by calling prefixmethod before it runs, and the postfixmethod after.
            harmony.Patch(targetmethod, prefixmethod, postfixmethod);
        }

        public static void HideSurgeryOptions()
        {
            Messages.Message(new Message("Abort Generation", MessageTypeDefOf.NeutralEvent), true);
            //HediffDefOf.WitcherTrials_Recipe_Hide_Grasses = true;
            //HediffDefOf.WitcherTrials_Recipe_Hide_Dreams = true;
            //HediffDefOf.WitcherTrials_Recipe_Hide_Elders = true;
        }



        // The class RimWorld.ITab_Pawn_Character is static so there is no this __instance. ???

        // This method is now always called right before RimWorld.HealthCardUtility.GenerateSurgeryOption.
        public static void GenerateSurgeryOption_Prefix( ref Pawn pawn, ref Thing thingForMedBills, ref RecipeDef recipe, ref IEnumerable<ThingDef> missingIngredients, ref BodyPartRecord part = null)
        {
            if (RecipeDefOf.WitcherTrials_Recipe_Hide_Grasses == true && recipe == RecipeDefOf.WitcherTrials_Recipe_Grasses)
            {

            }
        }
        // This method is now always called right before RimWorld.HealthCardUtility.GenerateSurgeryOption.
        //public static void GenerateSurgeryOption_Postfix()
        //{

        //}

    }
    public class WitcherUtilities
    {
        public static void HediffCleanup(Pawn pawn)
        {
            //This gets the 'Hediff' of the 'HediffDef's listed.
            Hediff hediffGrasses = pawn.health.hediffSet.GetFirstHediffOfDef(HediffDefOf.WitcherTrials_Hediff_Grasses);
            Hediff hediffDreams = pawn.health.hediffSet.GetFirstHediffOfDef(HediffDefOf.WitcherTrials_Hediff_Dreams);
            Hediff hediffElders = pawn.health.hediffSet.GetFirstHediffOfDef(HediffDefOf.WitcherTrials_Hediff_Elders);

            //If the pawn has the 'Hediff' Remove it.
            if (hediffGrasses != null)
                pawn.health.RemoveHediff(hediffGrasses);
            if (hediffDreams != null)
                pawn.health.RemoveHediff(hediffDreams);
            if (hediffElders != null)
                pawn.health.RemoveHediff(hediffElders);
        }
    }

    public class RecipeSurgery_Grasses : Recipe_Surgery
    {
        public override void ApplyOnPawn(Pawn pawn, BodyPartRecord part, Pawn billDoer, List<Thing> ingredients, Bill bill)
        {
            HarmonyPatches.GenerateSurgeryOption_Prefix();
        }
    }

    public class RecipeSurgery_Dreams : Recipe_Surgery
    {
        public override void ApplyOnPawn(Pawn pawn, BodyPartRecord part, Pawn billDoer, List<Thing> ingredients, Bill bill)
        {
            if (pawn.health.hediffSet.GetFirstHediffOfDef(HediffDefOf.WitcherTrials_Hediff_Grasses) != null)
            {
                if (billDoer != null)
                    if (CheckSurgeryFail(billDoer, pawn, ingredients, part, bill))
                    {
                        return;
                    }
                //Cleanup any witcher 'Hediff's
                WitcherUtilities.HediffCleanup(pawn);
                //Apply required 'Hediff'
                pawn.health.AddHediff(HediffDefOf.WitcherTrials_Hediff_Dreams, part, null, null);
            }
            else
            {
                Messages.Message(new Message("This body is not prepared for this trial.", MessageTypeDefOf.NeutralEvent), true);
                //return ingredient if no operations been performed.
                return;
            }
        }
    }

    public class RecipeSurgery_Elders : Recipe_Surgery
    {
        public override void ApplyOnPawn(Pawn pawn, BodyPartRecord part, Pawn billDoer, List<Thing> ingredients, Bill bill)
        {
            if (pawn.health.hediffSet.GetFirstHediffOfDef(HediffDefOf.WitcherTrials_Hediff_Dreams) != null)
            {
                if (billDoer != null)
                    if (CheckSurgeryFail(billDoer, pawn, ingredients, part, bill))
                    {
                        return;
                    }
                //Cleanup any witcher 'Hediff's
                WitcherUtilities.HediffCleanup(pawn);
                //Apply required 'Hediff'
                pawn.health.AddHediff(HediffDefOf.WitcherTrials_Hediff_Elders, part, null, null);
                pawn.story.hairColor = Color.white;
                pawn.Drawer.renderer.graphics.ResolveAllGraphics();
            }
            else
            {
                Messages.Message(new Message("This body is not prepared for this trial.", MessageTypeDefOf.NeutralEvent), true);
                //return ingredient if no operations been performed.
                return;
            }
        }
    }
}